import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Modal,
  Alert,
  RefreshControl,
  Platform,
  Switch,
  Dimensions,
  Animated,
  Image,
} from 'react-native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../navigation/types';
import { FileTextIcon, EditIcon, TrashIcon, CheckCircleIcon } from '../components/Icons';
import { templatesService, uploadService, companyProfileService } from '../services/api';
import * as ImagePicker from 'expo-image-picker';

type TemplatesScreenProps = {
  navigation: NativeStackNavigationProp<RootStackParamList, 'Home'>;
};

interface InvoiceTemplate {
  id: string;
  name: string;
  is_default: boolean;
  logo_url?: string;
  // Informations légales obligatoires selon la loi française
  company_name?: string;
  company_address?: string;
  company_phone?: string;
  company_email?: string;
  company_siret?: string;
  company_tva?: string;
  company_rcs?: string;
  company_capital?: string;
  company_legal_form?: string;
  // Mentions légales obligatoires
  is_micro_entreprise?: boolean;
  late_payment_penalty?: string;
  recovery_indemnity?: string;
  // Apparence
  primary_color: string;
  secondary_color?: string;
  template_layout: 'classic' | 'modern' | 'minimal' | 'professional';
  font_family?: string;
  header_text?: string;
  footer_text?: string;
  // Couleurs personnalisées avancées
  table_header_color?: string;
  border_color?: string;
  text_color?: string;
  secondary_text_color?: string;
  header_background_color?: string;
  total_color?: string;
  // Textes éditables de la facture
  invoice_title?: string;
  invoice_number_prefix?: string;
  client_label?: string;
  client_name_placeholder?: string;
  client_address_placeholder?: string;
  table_header_description?: string;
  table_header_quantity?: string;
  table_header_unit_price?: string;
  table_header_total?: string;
  sample_item_description?: string;
  subtotal_label?: string;
  vat_label?: string;
  total_label?: string;
  payment_terms?: string;
  bank_iban?: string;
  bank_bic?: string;
  bank_name?: string;
  show_logo: boolean;
  show_header: boolean;
  show_footer: boolean;
  show_payment_terms: boolean;
  show_bank_details: boolean;
  show_legal_mentions?: boolean;
  created_at?: string;
  updated_at?: string;
}

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

export default function TemplatesScreen({ navigation }: TemplatesScreenProps) {
  const [templates, setTemplates] = useState<InvoiceTemplate[]>([]);
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const [activeEditField, setActiveEditField] = useState<string | null>(null);
  const [deleteModalVisible, setDeleteModalVisible] = useState(false);
  const [templateToDelete, setTemplateToDelete] = useState<{ id: string; name: string; is_default: boolean } | null>(null);
  const [editingInline, setEditingInline] = useState<string | null>(null);
  const [companyProfileModalVisible, setCompanyProfileModalVisible] = useState(false);
  const [companyProfileData, setCompanyProfileData] = useState<any>({
    company_name: '',
    company_address: '',
    company_siret: '',
    company_phone: '',
    company_email: '',
    company_tva: '',
    company_rcs: '',
    company_capital: '',
    company_legal_form: 'SARL',
    is_micro_entreprise: false,
    bank_iban: '',
    bank_bic: '',
    bank_name: '',
    logo_url: '',
    late_payment_penalty: 'En cas de retard de paiement, une pénalité de retard de 3 fois le taux d\'intérêt légal (actuellement 10,52% pour l\'année 2024) sera exigible le jour suivant la date de paiement figurant sur la facture. Cette pénalité est calculée sur le montant TTC de la somme restant due et court à compter de la date d\'échéance du prix, sans qu\'aucune mise en demeure préalable ne soit nécessaire.',
    recovery_indemnity: 'En sus des pénalités de retard, toute somme non payée à sa date d\'exigibilité produira de plein droit le paiement d\'une indemnité forfaitaire de 40 euros due au titre des frais de recouvrement (Art. L441-6 du Code de commerce et D. 441-5).',
    payment_terms: 'Paiement à réception de facture par virement bancaire. Date d\'échéance : 30 jours fin de mois à compter de la date d\'émission. Escompte pour paiement anticipé : néant.',
    invoice_number_prefix: '',
    footer_text: 'Merci pour votre confiance. Cette facture est à régler selon les conditions de paiement indiquées ci-dessus.',
  });
  const sidebarAnim = useRef(new Animated.Value(0)).current;

  // Form fields
  const [formData, setFormData] = useState<Partial<InvoiceTemplate>>({
    name: '',
    is_default: false,
    company_name: '',
    company_address: '',
    company_phone: '',
    company_email: '',
    company_siret: '',
    company_tva: '',
    company_rcs: '',
    company_capital: '',
    company_legal_form: 'SARL',
    is_micro_entreprise: false,
    late_payment_penalty: 'En cas de retard de paiement, une pénalité de retard de 3 fois le taux d\'intérêt légal (actuellement 10,52% pour l\'année 2024) sera exigible le jour suivant la date de paiement figurant sur la facture. Cette pénalité est calculée sur le montant TTC de la somme restant due et court à compter de la date d\'échéance du prix, sans qu\'aucune mise en demeure préalable ne soit nécessaire.',
    recovery_indemnity: 'En sus des pénalités de retard, toute somme non payée à sa date d\'exigibilité produira de plein droit le paiement d\'une indemnité forfaitaire de 40 euros due au titre des frais de recouvrement (Art. L441-6 du Code de commerce et D. 441-5).',
    primary_color: '#2563EB',
    secondary_color: '#1E40AF',
    text_color: '#1F2937',
    secondary_text_color: '#6B7280',
    table_header_color: '#2563EB',
    border_color: '#E5E7EB',
    header_background_color: '#F3F4F6',
    total_color: '#059669',
    template_layout: 'professional',
    font_family: 'System',
    header_text: '',
    footer_text: 'Merci pour votre confiance. Cette facture est à régler selon les conditions de paiement indiquées ci-dessus.',
    invoice_title: 'FACTURE',
    invoice_number_prefix: '',
    client_label: 'Client',
    client_name_placeholder: 'Nom ou raison sociale du client',
    client_address_placeholder: 'Adresse complète de facturation',
    table_header_description: 'Désignation des biens ou services',
    table_header_quantity: 'Quantité',
    table_header_unit_price: 'Prix unitaire HT',
    table_header_total: 'Total HT',
    sample_item_description: 'Prestation de service / Livraison de bien',
    subtotal_label: 'Total HT',
    vat_label: 'TVA 20%',
    total_label: 'Total TTC',
    payment_terms: 'Paiement à réception de facture par virement bancaire. Date d\'échéance : 30 jours fin de mois à compter de la date d\'émission. Escompte pour paiement anticipé : néant.',
    bank_iban: '',
    bank_bic: '',
    bank_name: '',
    show_logo: true,
    show_header: true,
    show_footer: true,
    show_payment_terms: true,
    show_bank_details: true,
    show_legal_mentions: true,
  });

  useEffect(() => {
    fetchTemplates();
    loadCompanyProfile();
  }, []);

  const loadCompanyProfile = async () => {
    try {
      const response = await companyProfileService.get();
      // Le profil existe, on le stocke pour préremplir les templates
      console.log('Company profile loaded:', response.data);
    } catch (error: any) {
      // Si 404, c'est normal - pas encore de profil créé
      if (error.response?.status !== 404) {
        console.error('Error loading company profile:', error);
      }
    }
  };

  useEffect(() => {
    Animated.timing(sidebarAnim, {
      toValue: sidebarVisible ? 1 : 0,
      duration: 300,
      useNativeDriver: false,
    }).start();
  }, [sidebarVisible]);

  const fetchTemplates = async () => {
    try {
      setLoading(true);
      const response = await templatesService.getAll();
      setTemplates(response.data);
    } catch (error) {
      console.error('Error fetching templates:', error);
      Alert.alert('Erreur', 'Impossible de charger les templates');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const handleRefresh = () => {
    setRefreshing(true);
    fetchTemplates();
  };

  const openCreateModal = async () => {
    setEditMode(false);
    setSidebarVisible(false);
    setActiveEditField(null);

    // Essayer de charger le profil entreprise pour préremplir
    let companyProfile: any = null;
    try {
      const response = await companyProfileService.get();
      companyProfile = response.data;
    } catch (error: any) {
      // Si 404, le profil n'existe pas - demander de le créer
      if (error.response?.status === 404) {
        Alert.alert(
          'Profil entreprise requis',
          'Pour créer un template conforme à la loi française, veuillez d\'abord renseigner les informations de votre entreprise.',
          [
            {
              text: 'Annuler',
              style: 'cancel',
            },
            {
              text: 'Renseigner',
              onPress: () => setCompanyProfileModalVisible(true),
            },
          ]
        );
        return;
      }
    }

    setFormData({
      name: '',
      is_default: false,
      // Préremplir avec le profil entreprise si disponible
      company_name: companyProfile?.company_name || '',
      company_address: companyProfile?.company_address || '',
      company_phone: companyProfile?.company_phone || '',
      company_email: companyProfile?.company_email || '',
      company_siret: companyProfile?.company_siret || '',
      company_tva: companyProfile?.company_tva || '',
      company_rcs: companyProfile?.company_rcs || '',
      company_capital: companyProfile?.company_capital || '',
      company_legal_form: companyProfile?.company_legal_form || 'SARL',
      is_micro_entreprise: companyProfile?.is_micro_entreprise || false,
      logo_url: companyProfile?.logo_url || undefined,
      late_payment_penalty: companyProfile?.late_payment_penalty || 'En cas de retard de paiement, une pénalité de retard de 3 fois le taux d\'intérêt légal (actuellement 10,52% pour l\'année 2024) sera exigible le jour suivant la date de paiement figurant sur la facture. Cette pénalité est calculée sur le montant TTC de la somme restant due et court à compter de la date d\'échéance du prix, sans qu\'aucune mise en demeure préalable ne soit nécessaire.',
      recovery_indemnity: companyProfile?.recovery_indemnity || 'En sus des pénalités de retard, toute somme non payée à sa date d\'exigibilité produira de plein droit le paiement d\'une indemnité forfaitaire de 40 euros due au titre des frais de recouvrement (Art. L441-6 du Code de commerce et D. 441-5).',
      bank_iban: companyProfile?.bank_iban || '',
      bank_bic: companyProfile?.bank_bic || '',
      bank_name: companyProfile?.bank_name || '',
      invoice_number_prefix: companyProfile?.invoice_number_prefix || '',
      footer_text: companyProfile?.footer_text || 'Merci pour votre confiance. Cette facture est à régler selon les conditions de paiement indiquées ci-dessus.',
      payment_terms: companyProfile?.payment_terms || 'Paiement à réception de facture par virement bancaire. Date d\'échéance : 30 jours fin de mois à compter de la date d\'émission. Escompte pour paiement anticipé : néant.',
      // Couleurs et style par défaut
      primary_color: '#2563EB',
      secondary_color: '#1E40AF',
      text_color: '#1F2937',
      secondary_text_color: '#6B7280',
      table_header_color: '#2563EB',
      border_color: '#E5E7EB',
      header_background_color: '#F3F4F6',
      total_color: '#059669',
      template_layout: 'professional',
      font_family: 'System',
      header_text: '',
      // Labels par défaut
      invoice_title: 'FACTURE',
      client_label: 'Client',
      client_name_placeholder: 'Nom ou raison sociale du client',
      client_address_placeholder: 'Adresse complète de facturation',
      table_header_description: 'Désignation des biens ou services',
      table_header_quantity: 'Quantité',
      table_header_unit_price: 'Prix unitaire HT',
      table_header_total: 'Total HT',
      sample_item_description: 'Prestation de service / Livraison de bien',
      subtotal_label: 'Total HT',
      vat_label: 'TVA 20%',
      total_label: 'Total TTC',
      // Options d'affichage
      show_logo: true,
      show_header: true,
      show_footer: true,
      show_payment_terms: true,
      show_bank_details: true,
      show_legal_mentions: true,
    });
    setModalVisible(true);
  };

  const openEditModal = (template: InvoiceTemplate) => {
    setEditMode(true);
    setSidebarVisible(false);
    setActiveEditField(null);
    setFormData(template);
    setModalVisible(true);
  };

  const validateForm = (): boolean => {
    if (!formData.name?.trim()) {
      Alert.alert('Erreur', 'Le nom du template est obligatoire');
      return false;
    }
    if (!formData.company_name?.trim()) {
      Alert.alert('Erreur', 'Le nom de l\'entreprise est obligatoire');
      return false;
    }
    if (!formData.company_siret?.trim()) {
      Alert.alert('Erreur', 'Le SIRET est obligatoire (14 chiffres)');
      return false;
    }
    if (formData.company_siret && !/^\d{14}$/.test(formData.company_siret)) {
      Alert.alert('Erreur', 'Le SIRET doit contenir exactement 14 chiffres');
      return false;
    }
    if (!formData.company_address?.trim()) {
      Alert.alert('Erreur', 'L\'adresse de l\'entreprise est obligatoire');
      return false;
    }
    if (!formData.company_legal_form?.trim()) {
      Alert.alert('Erreur', 'La forme juridique est obligatoire');
      return false;
    }
    if (!formData.company_rcs?.trim()) {
      Alert.alert('Attention', 'Le RCS est fortement recommandé (ex: "RCS Paris 123 456 789")');
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    try {
      setLoading(true);
      if (editMode && formData.id) {
        await templatesService.update(formData.id, formData);
        Alert.alert('Succès', 'Template mis à jour avec succès');
      } else {
        await templatesService.create(formData);
        Alert.alert('Succès', 'Template créé avec succès');
      }
      setModalVisible(false);
      fetchTemplates();
    } catch (error) {
      console.error('Error saving template:', error);
      Alert.alert('Erreur', 'Impossible de sauvegarder le template');
    } finally {
      setLoading(false);
    }
  };

  const confirmDelete = (template: InvoiceTemplate) => {
    setTemplateToDelete({
      id: template.id,
      name: template.name,
      is_default: template.is_default,
    });
    setDeleteModalVisible(true);
  };

  const handleDelete = async () => {
    if (!templateToDelete) return;

    if (templateToDelete.is_default) {
      Alert.alert(
        'Impossible de supprimer',
        'Vous ne pouvez pas supprimer le template par défaut. Définissez d\'abord un autre template comme défaut.'
      );
      setDeleteModalVisible(false);
      setTemplateToDelete(null);
      return;
    }

    try {
      setLoading(true);
      await templatesService.delete(templateToDelete.id);
      Alert.alert('Succès', 'Template supprimé avec succès');
      setDeleteModalVisible(false);
      setTemplateToDelete(null);
      fetchTemplates();
    } catch (error) {
      console.error('Error deleting template:', error);
      Alert.alert('Erreur', 'Impossible de supprimer le template');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveCompanyProfile = async () => {
    // Validation
    if (!companyProfileData.company_name?.trim()) {
      Alert.alert('Erreur', 'Le nom de l\'entreprise est obligatoire');
      return;
    }
    if (!companyProfileData.company_siret?.trim()) {
      Alert.alert('Erreur', 'Le SIRET est obligatoire (14 chiffres)');
      return;
    }
    if (!/^\d{14}$/.test(companyProfileData.company_siret)) {
      Alert.alert('Erreur', 'Le SIRET doit contenir exactement 14 chiffres');
      return;
    }
    if (!companyProfileData.company_address?.trim()) {
      Alert.alert('Erreur', 'L\'adresse de l\'entreprise est obligatoire');
      return;
    }

    try {
      setLoading(true);
      await companyProfileService.create(companyProfileData);
      Alert.alert('Succès', 'Profil entreprise créé avec succès');
      setCompanyProfileModalVisible(false);
      // Maintenant on peut ouvrir le modal de création de template
      openCreateModal();
    } catch (error: any) {
      console.error('Error saving company profile:', error);
      if (error.response?.status === 409) {
        Alert.alert('Erreur', 'Un profil entreprise existe déjà');
      } else {
        Alert.alert('Erreur', 'Impossible de sauvegarder le profil entreprise');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleLogoUpload = async () => {
    try {
      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();

      if (permissionResult.granted === false) {
        Alert.alert('Permission requise', 'Vous devez autoriser l\'accès à la galerie pour importer un logo');
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        const asset = result.assets[0];
        const fileName = asset.uri.split('/').pop() || 'logo.jpg';
        const fileType = asset.uri.match(/\.(jpg|jpeg|png|gif)$/i)?.[0] || '.jpg';

        const formDataUpload = new FormData();
        formDataUpload.append('file', {
          uri: asset.uri,
          type: `image/${fileType.replace('.', '')}`,
          name: fileName,
        } as any);

        const uploadResponse = await uploadService.uploadImage(formDataUpload);
        setFormData({ ...formData, logo_url: uploadResponse.data.url });
        Alert.alert('Succès', 'Logo importé avec succès');
      }
    } catch (error) {
      console.error('Error uploading logo:', error);
      Alert.alert('Erreur', 'Impossible d\'importer le logo');
    }
  };

  const handleCompanyLogoUpload = async () => {
    try {
      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();

      if (permissionResult.granted === false) {
        Alert.alert('Permission requise', 'Vous devez autoriser l\'accès à la galerie pour importer un logo');
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        const asset = result.assets[0];
        const fileName = asset.uri.split('/').pop() || 'logo.jpg';
        const fileType = asset.uri.match(/\.(jpg|jpeg|png|gif)$/i)?.[0] || '.jpg';

        const formDataUpload = new FormData();
        formDataUpload.append('file', {
          uri: asset.uri,
          type: `image/${fileType.replace('.', '')}`,
          name: fileName,
        } as any);

        const uploadResponse = await uploadService.uploadImage(formDataUpload);
        setCompanyProfileData({ ...companyProfileData, logo_url: uploadResponse.data.url });
        Alert.alert('Succès', 'Logo importé avec succès');
      }
    } catch (error) {
      console.error('Error uploading logo:', error);
      Alert.alert('Erreur', 'Impossible d\'importer le logo');
    }
  };

  const renderEditableText = (
    field: keyof InvoiceTemplate,
    placeholder: string,
    style?: any,
    multiline: boolean = false
  ) => {
    const isEditing = editingInline === field;
    const value = formData[field] as string || '';

    return (
      <TouchableOpacity
        onPress={() => setEditingInline(field as string)}
        style={[styles.inlineEditable, isEditing && styles.inlineEditableActive]}
        activeOpacity={0.7}
      >
        <TextInput
          style={[style, isEditing && styles.inlineEditableInput]}
          value={value}
          onChangeText={(text) => setFormData({ ...formData, [field]: text })}
          placeholder={placeholder}
          placeholderTextColor="#9CA3AF"
          onFocus={() => setEditingInline(field as string)}
          onBlur={() => setEditingInline(null)}
          multiline={multiline}
          numberOfLines={multiline ? 3 : 1}
        />
      </TouchableOpacity>
    );
  };

  const renderColorPicker = (field: keyof InvoiceTemplate, label: string) => {
    const colors = ['#2563EB', '#DC2626', '#059669', '#D97706', '#7C3AED', '#EC4899', '#1F2937'];

    return (
      <View style={styles.sidebarColorPicker}>
        <Text style={styles.sidebarLabel}>{label}</Text>
        <View style={styles.colorGrid}>
          {colors.map((color) => (
            <TouchableOpacity
              key={color}
              onPress={() => setFormData({ ...formData, [field]: color })}
              style={[
                styles.colorOption,
                { backgroundColor: color },
                formData[field] === color && styles.colorOptionSelected,
              ]}
            >
              {formData[field] === color && (
                <CheckCircleIcon size={16} color="#fff" />
              )}
            </TouchableOpacity>
          ))}
        </View>
        <TextInput
          style={styles.colorInput}
          value={formData[field] as string || ''}
          onChangeText={(text) => setFormData({ ...formData, [field]: text })}
          placeholder="#000000"
          maxLength={7}
        />
      </View>
    );
  };

  const renderSidebar = () => {
    const sidebarWidth = sidebarAnim.interpolate({
      inputRange: [0, 1],
      outputRange: [0, 380],
    });

    return (
      <Animated.View style={[styles.sidebar, { width: sidebarWidth }]}>
        <ScrollView style={styles.sidebarScroll} showsVerticalScrollIndicator={false}>
          {/* Template Name */}
          <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Nom du template</Text>
            <TextInput
              style={styles.sidebarInput}
              value={formData.name}
              onChangeText={(text) => setFormData({ ...formData, name: text })}
              placeholder="Nom du template"
              placeholderTextColor="#9CA3AF"
            />
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Définir comme défaut</Text>
              <Switch
                value={formData.is_default}
                onValueChange={(value) => setFormData({ ...formData, is_default: value })}
              />
            </View>
          </View>

          {/* Legal Info */}
          <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Informations légales ⚠️</Text>
            <TextInput
              style={styles.sidebarInput}
              value={formData.company_name}
              onChangeText={(text) => setFormData({ ...formData, company_name: text })}
              placeholder="Raison sociale"
              placeholderTextColor="#9CA3AF"
            />
            <TextInput
              style={[styles.sidebarInput, styles.sidebarInputMultiline]}
              value={formData.company_address}
              onChangeText={(text) => setFormData({ ...formData, company_address: text })}
              placeholder="Adresse complète"
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={3}
            />
            <TextInput
              style={styles.sidebarInput}
              value={formData.company_siret}
              onChangeText={(text) => setFormData({ ...formData, company_siret: text })}
              placeholder="SIRET (14 chiffres)"
              placeholderTextColor="#9CA3AF"
              keyboardType="numeric"
              maxLength={14}
            />
            <TextInput
              style={styles.sidebarInput}
              value={formData.company_rcs}
              onChangeText={(text) => setFormData({ ...formData, company_rcs: text })}
              placeholder="RCS (ex: RCS Paris 123 456 789)"
              placeholderTextColor="#9CA3AF"
            />

            <Text style={styles.sidebarLabel}>Forme juridique</Text>
            <View style={styles.legalFormButtons}>
              {['SARL', 'SAS', 'EURL', 'Auto-entrepreneur', 'SCI', 'Association'].map((form) => (
                <TouchableOpacity
                  key={form}
                  style={[
                    styles.legalFormButton,
                    formData.company_legal_form === form && styles.legalFormButtonActive
                  ]}
                  onPress={() => setFormData({ ...formData, company_legal_form: form })}
                >
                  <Text style={[
                    styles.legalFormButtonText,
                    formData.company_legal_form === form && styles.legalFormButtonTextActive
                  ]}>
                    {form}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            <TextInput
              style={styles.sidebarInput}
              value={formData.company_capital}
              onChangeText={(text) => setFormData({ ...formData, company_capital: text })}
              placeholder="Capital social (ex: 10 000€)"
              placeholderTextColor="#9CA3AF"
            />

            <View style={styles.switchRow}>
              <View style={{ flex: 1 }}>
                <Text style={styles.switchLabel}>Micro-entreprise</Text>
                <Text style={styles.switchHint}>TVA non applicable, art. 293 B</Text>
              </View>
              <Switch
                value={formData.is_micro_entreprise}
                onValueChange={(value) => setFormData({ ...formData, is_micro_entreprise: value })}
              />
            </View>

            {!formData.is_micro_entreprise && (
              <TextInput
                style={styles.sidebarInput}
                value={formData.company_tva}
                onChangeText={(text) => setFormData({ ...formData, company_tva: text })}
                placeholder="N° TVA intracommunautaire"
                placeholderTextColor="#9CA3AF"
              />
            )}

            <TextInput
              style={styles.sidebarInput}
              value={formData.company_phone}
              onChangeText={(text) => setFormData({ ...formData, company_phone: text })}
              placeholder="Téléphone"
              placeholderTextColor="#9CA3AF"
              keyboardType="phone-pad"
            />
            <TextInput
              style={styles.sidebarInput}
              value={formData.company_email}
              onChangeText={(text) => setFormData({ ...formData, company_email: text })}
              placeholder="Email"
              placeholderTextColor="#9CA3AF"
              keyboardType="email-address"
              autoCapitalize="none"
            />
          </View>

          {/* Colors */}
          <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Couleurs</Text>
            {renderColorPicker('primary_color', 'Couleur principale')}
            {renderColorPicker('text_color', 'Couleur du texte')}
            {renderColorPicker('table_header_color', 'Couleur en-tête tableau')}
            {renderColorPicker('border_color', 'Couleur des bordures')}
            {renderColorPicker('secondary_text_color', 'Couleur texte secondaire')}
            {renderColorPicker('header_background_color', 'Couleur fond en-tête')}
            {renderColorPicker('total_color', 'Couleur du total')}
          </View>

          {/* Payment & Bank */}
          <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Paiement et banque</Text>
            <TextInput
              style={[styles.sidebarInput, styles.sidebarInputMultiline]}
              value={formData.payment_terms}
              onChangeText={(text) => setFormData({ ...formData, payment_terms: text })}
              placeholder="Conditions de paiement"
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={3}
            />
            <TextInput
              style={styles.sidebarInput}
              value={formData.bank_iban}
              onChangeText={(text) => setFormData({ ...formData, bank_iban: text })}
              placeholder="IBAN"
              placeholderTextColor="#9CA3AF"
              autoCapitalize="characters"
            />
            <TextInput
              style={styles.sidebarInput}
              value={formData.bank_bic}
              onChangeText={(text) => setFormData({ ...formData, bank_bic: text })}
              placeholder="BIC"
              placeholderTextColor="#9CA3AF"
              autoCapitalize="characters"
            />
            <TextInput
              style={styles.sidebarInput}
              value={formData.bank_name}
              onChangeText={(text) => setFormData({ ...formData, bank_name: text })}
              placeholder="Nom de la banque"
              placeholderTextColor="#9CA3AF"
            />
          </View>

          {/* Legal Mentions */}
          <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Mentions légales</Text>
            <TextInput
              style={[styles.sidebarInput, styles.sidebarInputMultiline]}
              value={formData.late_payment_penalty}
              onChangeText={(text) => setFormData({ ...formData, late_payment_penalty: text })}
              placeholder="Pénalités de retard"
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={3}
            />
            <TextInput
              style={[styles.sidebarInput, styles.sidebarInputMultiline]}
              value={formData.recovery_indemnity}
              onChangeText={(text) => setFormData({ ...formData, recovery_indemnity: text })}
              placeholder="Indemnité de recouvrement"
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={3}
            />
          </View>

          {/* Display Options */}
          <View style={styles.sidebarSection}>
            <Text style={styles.sidebarSectionTitle}>Options d'affichage</Text>
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Afficher le logo</Text>
              <Switch
                value={formData.show_logo}
                onValueChange={(value) => setFormData({ ...formData, show_logo: value })}
              />
            </View>
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Afficher l'en-tête</Text>
              <Switch
                value={formData.show_header}
                onValueChange={(value) => setFormData({ ...formData, show_header: value })}
              />
            </View>
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Afficher le pied de page</Text>
              <Switch
                value={formData.show_footer}
                onValueChange={(value) => setFormData({ ...formData, show_footer: value })}
              />
            </View>
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Afficher conditions de paiement</Text>
              <Switch
                value={formData.show_payment_terms}
                onValueChange={(value) => setFormData({ ...formData, show_payment_terms: value })}
              />
            </View>
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Afficher coordonnées bancaires</Text>
              <Switch
                value={formData.show_bank_details}
                onValueChange={(value) => setFormData({ ...formData, show_bank_details: value })}
              />
            </View>
            <View style={styles.switchRow}>
              <Text style={styles.switchLabel}>Afficher mentions légales</Text>
              <Switch
                value={formData.show_legal_mentions}
                onValueChange={(value) => setFormData({ ...formData, show_legal_mentions: value })}
              />
            </View>
          </View>
        </ScrollView>
      </Animated.View>
    );
  };

  const renderFullscreenPreview = () => {
    const sampleTotal = 1500;
    const sampleTVA = sampleTotal * 0.2;
    const sampleTTC = sampleTotal + sampleTVA;

    return (
      <View style={styles.fullscreenPreview}>
        <View style={styles.previewToolbar}>
          <TouchableOpacity
            style={styles.toolbarButton}
            onPress={() => setSidebarVisible(!sidebarVisible)}
          >
            <Text style={styles.toolbarButtonText}>
              {sidebarVisible ? '◀ Masquer' : '▶ Options'}
            </Text>
          </TouchableOpacity>
          <View style={styles.previewHints}>
            <Text style={styles.previewHint}>💡 Cliquez sur n'importe quel texte pour le modifier</Text>
            {!editMode && (
              <Text style={styles.previewHintSmall}>
                💼 Astuce : Créez votre profil entreprise dans les paramètres pour préremplir automatiquement ces champs !
              </Text>
            )}
          </View>
        </View>

        <ScrollView style={styles.previewScroll} contentContainerStyle={styles.previewScrollContent}>
          <View style={[styles.invoicePreview, { borderColor: formData.border_color || '#E5E7EB' }]}>
            {/* Header */}
            {formData.show_header && (
              <View style={[styles.invoiceHeader, { backgroundColor: formData.header_background_color || '#F3F4F6' }]}>
                <View style={styles.invoiceHeaderLeft}>
                  {renderEditableText('invoice_title', 'FACTURE', [
                    styles.invoiceTitle,
                    { color: formData.primary_color },
                    editingInline === 'invoice_title' && styles.highlightedElement
                  ])}
                  <View style={{ flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap' }}>
                    <Text style={[styles.invoiceNumberLabel, { color: formData.text_color || '#1F2937' }]}>
                      Facture N°
                    </Text>
                    {renderEditableText('invoice_number_prefix', '2025', [
                      styles.invoiceNumber,
                      { color: formData.text_color || '#1F2937' },
                      editingInline === 'invoice_number_prefix' && styles.highlightedElement
                    ])}
                    <Text style={[styles.invoiceNumber, { color: formData.text_color || '#1F2937' }]}>
                      -001
                    </Text>
                  </View>
                  <Text style={[styles.invoiceDate, { color: formData.secondary_text_color || '#6B7280' }]}>
                    Date d'émission : {new Date().toLocaleDateString('fr-FR')}
                  </Text>
                  <Text style={[styles.invoiceDate, { color: formData.secondary_text_color || '#6B7280' }]}>
                    Date de prestation : {new Date().toLocaleDateString('fr-FR')}
                  </Text>
                </View>
                {formData.show_logo && (
                  <TouchableOpacity
                    style={styles.logoPlaceholder}
                    onPress={handleLogoUpload}
                    activeOpacity={0.7}
                  >
                    {formData.logo_url ? (
                      <Image source={{ uri: formData.logo_url }} style={styles.logoImage} />
                    ) : (
                      <>
                        <Text style={styles.logoText}>📷</Text>
                        <Text style={styles.logoText}>Cliquez pour</Text>
                        <Text style={styles.logoText}>ajouter un logo</Text>
                      </>
                    )}
                  </TouchableOpacity>
                )}
              </View>
            )}

            {/* Company & Client Info */}
            <View style={styles.invoiceSection}>
              <View style={styles.companyInfo}>
                {renderEditableText('company_name', 'Nom de votre entreprise', [
                  styles.companyName,
                  { color: formData.text_color || '#1F2937' },
                  editingInline === 'company_name' && styles.highlightedElement
                ])}
                {renderEditableText('company_address', 'Adresse de votre entreprise', [
                  styles.companyDetails,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'company_address' && styles.highlightedElement
                ], true)}
                <View style={{ flexDirection: 'row' }}>
                  <Text style={[styles.companyDetails, { color: formData.secondary_text_color || '#6B7280' }]}>
                    SIRET :
                  </Text>
                  {renderEditableText('company_siret', '00000000000000', [
                    styles.companyDetails,
                    { color: formData.secondary_text_color || '#6B7280' },
                    editingInline === 'company_siret' && styles.highlightedElement
                  ])}
                </View>
                {formData.company_rcs && renderEditableText('company_rcs', 'RCS', [
                  styles.companyDetails,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'company_rcs' && styles.highlightedElement
                ])}
                {formData.company_capital && (
                  <View style={{ flexDirection: 'row' }}>
                    <Text style={[styles.companyDetails, { color: formData.secondary_text_color || '#6B7280' }]}>
                      Capital social :
                    </Text>
                    {renderEditableText('company_capital', '10 000€', [
                      styles.companyDetails,
                      { color: formData.secondary_text_color || '#6B7280' },
                      editingInline === 'company_capital' && styles.highlightedElement
                    ])}
                  </View>
                )}
                {!formData.is_micro_entreprise && formData.company_tva && (
                  <View style={{ flexDirection: 'row' }}>
                    <Text style={[styles.companyDetails, { color: formData.secondary_text_color || '#6B7280' }]}>
                      TVA :
                    </Text>
                    {renderEditableText('company_tva', 'FR00000000000', [
                      styles.companyDetails,
                      { color: formData.secondary_text_color || '#6B7280' },
                      editingInline === 'company_tva' && styles.highlightedElement
                    ])}
                  </View>
                )}
                {formData.is_micro_entreprise && (
                  <Text style={[styles.companyDetails, { color: formData.secondary_text_color || '#6B7280', fontStyle: 'italic' }]}>
                    TVA non applicable, art. 293 B du CGI
                  </Text>
                )}
              </View>

              <View style={styles.clientInfo}>
                {renderEditableText('client_label', 'Client', [
                  styles.clientLabel,
                  { color: formData.primary_color },
                  editingInline === 'client_label' && styles.highlightedElement
                ])}
                {renderEditableText('client_name_placeholder', 'Nom du client', [
                  styles.clientName,
                  { color: formData.text_color || '#1F2937' },
                  editingInline === 'client_name_placeholder' && styles.highlightedElement
                ])}
                {renderEditableText('client_address_placeholder', 'Adresse du client', [
                  styles.clientAddress,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'client_address_placeholder' && styles.highlightedElement
                ], true)}
              </View>
            </View>

            {/* Items Table */}
            <View style={styles.invoiceTable}>
              <View style={[styles.tableHeader, { backgroundColor: formData.table_header_color || '#2563EB' }]}>
                {renderEditableText('table_header_description', 'Désignation', [
                  styles.tableHeaderText,
                  styles.tableColDescription,
                  editingInline === 'table_header_description' && styles.highlightedElement
                ])}
                {renderEditableText('table_header_quantity', 'Qté', [
                  styles.tableHeaderText,
                  styles.tableColQty,
                  editingInline === 'table_header_quantity' && styles.highlightedElement
                ])}
                {renderEditableText('table_header_unit_price', 'Prix U.', [
                  styles.tableHeaderText,
                  styles.tableColPrice,
                  editingInline === 'table_header_unit_price' && styles.highlightedElement
                ])}
                {renderEditableText('table_header_total', 'Total', [
                  styles.tableHeaderText,
                  styles.tableColTotal,
                  editingInline === 'table_header_total' && styles.highlightedElement
                ])}
              </View>
              <View style={[styles.tableRow, { borderColor: formData.border_color || '#E5E7EB' }]}>
                {renderEditableText('sample_item_description', 'Prestation de conseil', [
                  styles.tableCell,
                  styles.tableColDescription,
                  { color: formData.text_color || '#1F2937' },
                  editingInline === 'sample_item_description' && styles.highlightedElement
                ])}
                <Text style={[styles.tableCell, styles.tableColQty, { color: formData.text_color || '#1F2937' }]}>1</Text>
                <Text style={[styles.tableCell, styles.tableColPrice, { color: formData.text_color || '#1F2937' }]}>1 500,00 €</Text>
                <Text style={[styles.tableCell, styles.tableColTotal, { color: formData.text_color || '#1F2937' }]}>1 500,00 €</Text>
              </View>
            </View>

            {/* Totals */}
            <View style={styles.totalsSection}>
              <View style={styles.totalRow}>
                {renderEditableText('subtotal_label', 'Sous-total HT', [
                  styles.totalLabel,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'subtotal_label' && styles.highlightedElement
                ])}
                <Text style={[styles.totalValue, { color: formData.text_color || '#1F2937' }]}>
                  {sampleTotal.toFixed(2)} €
                </Text>
              </View>
              {!formData.is_micro_entreprise && (
                <View style={styles.totalRow}>
                  {renderEditableText('vat_label', 'TVA 20%', [
                    styles.totalLabel,
                    { color: formData.secondary_text_color || '#6B7280' },
                    editingInline === 'vat_label' && styles.highlightedElement
                  ])}
                  <Text style={[styles.totalValue, { color: formData.text_color || '#1F2937' }]}>
                    {sampleTVA.toFixed(2)} €
                  </Text>
                </View>
              )}
              <View style={[styles.totalRow, styles.grandTotalRow, { backgroundColor: formData.header_background_color || '#F3F4F6' }]}>
                {renderEditableText('total_label', 'Total TTC', [
                  styles.grandTotalLabel,
                  { color: formData.total_color || '#059669' },
                  editingInline === 'total_label' && styles.highlightedElement
                ])}
                <Text style={[styles.grandTotalValue, { color: formData.total_color || '#059669' }]}>
                  {formData.is_micro_entreprise ? sampleTotal.toFixed(2) : sampleTTC.toFixed(2)} €
                </Text>
              </View>
            </View>

            {/* Payment Terms */}
            {formData.show_payment_terms && formData.payment_terms && (
              <View style={styles.invoiceSection}>
                <Text style={[styles.sectionTitle, { color: formData.primary_color }]}>
                  Conditions de paiement
                </Text>
                {renderEditableText('payment_terms', 'Paiement à réception', [
                  styles.sectionText,
                  { color: formData.text_color || '#1F2937' },
                  editingInline === 'payment_terms' && styles.highlightedElement
                ], true)}
              </View>
            )}

            {/* Bank Details */}
            {formData.show_bank_details && formData.bank_iban && (
              <View style={styles.invoiceSection}>
                <Text style={[styles.sectionTitle, { color: formData.primary_color }]}>
                  Coordonnées bancaires
                </Text>
                <View style={{ flexDirection: 'row' }}>
                  <Text style={[styles.sectionText, { color: formData.text_color || '#1F2937' }]}>IBAN : </Text>
                  {renderEditableText('bank_iban', 'FR00 0000 0000 0000', [
                    styles.sectionText,
                    { color: formData.text_color || '#1F2937' },
                    editingInline === 'bank_iban' && styles.highlightedElement
                  ])}
                </View>
                {formData.bank_bic && (
                  <View style={{ flexDirection: 'row' }}>
                    <Text style={[styles.sectionText, { color: formData.text_color || '#1F2937' }]}>BIC : </Text>
                    {renderEditableText('bank_bic', 'BNPAFRPP', [
                      styles.sectionText,
                      { color: formData.text_color || '#1F2937' },
                      editingInline === 'bank_bic' && styles.highlightedElement
                    ])}
                  </View>
                )}
                {formData.bank_name && renderEditableText('bank_name', 'Nom de la banque', [
                  styles.sectionText,
                  { color: formData.text_color || '#1F2937' },
                  editingInline === 'bank_name' && styles.highlightedElement
                ])}
              </View>
            )}

            {/* Legal Mentions */}
            {formData.show_legal_mentions && (
              <View style={[styles.legalSection, { borderColor: formData.border_color || '#E5E7EB' }]}>
                <Text style={[styles.legalTitle, { color: formData.text_color || '#1F2937' }]}>
                  Mentions légales
                </Text>
                {formData.late_payment_penalty && renderEditableText('late_payment_penalty', 'Pénalités de retard', [
                  styles.legalText,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'late_payment_penalty' && styles.highlightedElement
                ], true)}
                {formData.recovery_indemnity && renderEditableText('recovery_indemnity', 'Indemnité de recouvrement', [
                  styles.legalText,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'recovery_indemnity' && styles.highlightedElement
                ], true)}
              </View>
            )}

            {/* Footer */}
            {formData.show_footer && formData.footer_text && (
              <View style={styles.invoiceFooter}>
                {renderEditableText('footer_text', 'Merci pour votre confiance', [
                  styles.footerText,
                  { color: formData.secondary_text_color || '#6B7280' },
                  editingInline === 'footer_text' && styles.highlightedElement
                ])}
              </View>
            )}
          </View>
        </ScrollView>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Templates de facture</Text>
        <TouchableOpacity style={styles.addButton} onPress={openCreateModal}>
          <Text style={styles.addButtonText}>+ Nouveau template</Text>
        </TouchableOpacity>
      </View>

      <ScrollView
        style={styles.templatesList}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />}
      >
        {templates.map((template) => (
          <View key={template.id} style={styles.templateCard}>
            <View style={styles.templateHeader}>
              <FileTextIcon size={24} color={template.primary_color || '#007AFF'} />
              <View style={styles.templateInfo}>
                <Text style={styles.templateName}>{template.name}</Text>
                {template.is_default && (
                  <View style={styles.defaultBadge}>
                    <Text style={styles.defaultBadgeText}>Par défaut</Text>
                  </View>
                )}
              </View>
            </View>
            <View style={styles.templateActions}>
              <TouchableOpacity
                style={styles.actionButton}
                onPress={() => openEditModal(template)}
              >
                <EditIcon size={20} color="#007AFF" />
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.actionButton}
                onPress={() => confirmDelete(template)}
              >
                <TrashIcon size={20} color="#DC2626" />
              </TouchableOpacity>
            </View>
          </View>
        ))}
      </ScrollView>

      {/* Fullscreen Editor Modal */}
      <Modal visible={modalVisible} animationType="slide" presentationStyle="fullScreen">
        <View style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <TouchableOpacity onPress={() => setModalVisible(false)}>
              <Text style={styles.modalCloseButton}>✕ Fermer</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>
              {editMode ? 'Modifier le template' : 'Nouveau template'}
            </Text>
            <TouchableOpacity onPress={handleSave} disabled={loading}>
              <Text style={[styles.modalSaveButton, loading && styles.modalSaveButtonDisabled]}>
                💾 Enregistrer
              </Text>
            </TouchableOpacity>
          </View>

          <View style={styles.editorContainer}>
            {renderSidebar()}
            {renderFullscreenPreview()}
          </View>
        </View>
      </Modal>

      {/* Company Profile Modal */}
      <Modal visible={companyProfileModalVisible} animationType="slide" transparent>
        <View style={styles.deleteModalOverlay}>
          <ScrollView contentContainerStyle={styles.companyProfileModalContent} showsVerticalScrollIndicator={false}>
            <Text style={styles.deleteModalTitle}>Profil Entreprise</Text>
            <Text style={styles.deleteModalText}>
              Pour créer des factures conformes à la loi française, veuillez renseigner les informations de votre entreprise.
            </Text>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Nom de l'entreprise *</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_name}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_name: text })}
                placeholder="Ex: SARL Tech Solutions"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>SIRET * (14 chiffres)</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_siret}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_siret: text })}
                placeholder="12345678901234"
                keyboardType="numeric"
                maxLength={14}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Adresse complète *</Text>
              <TextInput
                style={[styles.input, { height: 80 }]}
                value={companyProfileData.company_address}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_address: text })}
                placeholder="Ex: 123 Rue de la République, 75001 Paris"
                multiline
                numberOfLines={3}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Forme juridique</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_legal_form}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_legal_form: text })}
                placeholder="Ex: SARL, SAS, EURL, Auto-entrepreneur"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Téléphone</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_phone}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_phone: text })}
                placeholder="Ex: +33 1 23 45 67 89"
                keyboardType="phone-pad"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Email</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_email}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_email: text })}
                placeholder="contact@entreprise.fr"
                keyboardType="email-address"
                autoCapitalize="none"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>N° TVA Intracommunautaire</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_tva}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_tva: text })}
                placeholder="Ex: FR 12 345678901"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>RCS (Registre du Commerce)</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_rcs}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_rcs: text })}
                placeholder="Ex: RCS Paris 123 456 789"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Capital social</Text>
              <TextInput
                style={styles.input}
                value={companyProfileData.company_capital}
                onChangeText={(text) => setCompanyProfileData({ ...companyProfileData, company_capital: text })}
                placeholder="Ex: 10 000 €"
              />
            </View>

            <View style={[styles.inputGroup, { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }]}>
              <Text style={styles.inputLabel}>Micro-entreprise (TVA non applicable)</Text>
              <Switch
                value={companyProfileData.is_micro_entreprise}
                onValueChange={(value) => setCompanyProfileData({ ...companyProfileData, is_micro_entreprise: value })}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Logo (optionnel)</Text>
              <TouchableOpacity style={styles.uploadButton} onPress={handleCompanyLogoUpload}>
                <Text style={styles.uploadButtonText}>
                  {companyProfileData.logo_url ? '✓ Logo sélectionné' : 'Choisir un logo'}
                </Text>
              </TouchableOpacity>
            </View>

            <View style={styles.deleteModalActions}>
              <TouchableOpacity
                style={[styles.deleteModalButton, styles.deleteModalCancelButton]}
                onPress={() => setCompanyProfileModalVisible(false)}
              >
                <Text style={styles.deleteModalCancelButtonText}>Annuler</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.deleteModalButton, styles.deleteModalConfirmButton]}
                onPress={handleSaveCompanyProfile}
                disabled={loading}
              >
                <Text style={styles.deleteModalConfirmButtonText}>
                  {loading ? 'Enregistrement...' : 'Enregistrer'}
                </Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </View>
      </Modal>

      {/* Delete Confirmation Modal */}
      <Modal visible={deleteModalVisible} animationType="fade" transparent>
        <View style={styles.deleteModalOverlay}>
          <View style={styles.deleteModalContent}>
            <Text style={styles.deleteModalTitle}>Confirmer la suppression</Text>
            <Text style={styles.deleteModalText}>
              Êtes-vous sûr de vouloir supprimer le template "{templateToDelete?.name}" ?
            </Text>
            <View style={styles.deleteModalActions}>
              <TouchableOpacity
                style={[styles.deleteModalButton, styles.deleteModalCancelButton]}
                onPress={() => {
                  setDeleteModalVisible(false);
                  setTemplateToDelete(null);
                }}
              >
                <Text style={styles.deleteModalCancelButtonText}>Annuler</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.deleteModalButton, styles.deleteModalConfirmButton]}
                onPress={handleDelete}
              >
                <Text style={styles.deleteModalConfirmButtonText}>Supprimer</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#111827',
  },
  addButton: {
    backgroundColor: '#2563EB',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 8,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  templatesList: {
    flex: 1,
    padding: 20,
  },
  templateCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  templateHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  templateInfo: {
    marginLeft: 12,
    flex: 1,
  },
  templateName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 4,
  },
  defaultBadge: {
    backgroundColor: '#DBEAFE',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
    alignSelf: 'flex-start',
  },
  defaultBadgeText: {
    color: '#2563EB',
    fontSize: 12,
    fontWeight: '500',
  },
  templateActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    padding: 8,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#F3F4F6',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 3,
    zIndex: 10,
  },
  modalCloseButton: {
    fontSize: 16,
    color: '#DC2626',
    fontWeight: '600',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#111827',
  },
  modalSaveButton: {
    fontSize: 16,
    color: '#2563EB',
    fontWeight: '600',
  },
  modalSaveButtonDisabled: {
    opacity: 0.5,
  },
  editorContainer: {
    flex: 1,
    flexDirection: 'row',
  },
  sidebar: {
    backgroundColor: '#fff',
    borderRightWidth: 1,
    borderRightColor: '#E5E7EB',
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 2, height: 0 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
    zIndex: 5,
  },
  sidebarScroll: {
    flex: 1,
  },
  sidebarSection: {
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  sidebarSectionTitle: {
    fontSize: 14,
    fontWeight: '700',
    color: '#111827',
    marginBottom: 12,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
  },
  sidebarLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: '#6B7280',
    marginBottom: 8,
    marginTop: 12,
  },
  sidebarInput: {
    backgroundColor: '#F9FAFB',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 6,
    padding: 10,
    fontSize: 14,
    color: '#111827',
    marginBottom: 12,
  },
  sidebarInputMultiline: {
    minHeight: 70,
    textAlignVertical: 'top',
  },
  switchRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
  },
  switchLabel: {
    fontSize: 13,
    color: '#111827',
    fontWeight: '500',
  },
  switchHint: {
    fontSize: 11,
    color: '#6B7280',
    marginTop: 2,
  },
  legalFormButtons: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginBottom: 12,
  },
  legalFormButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#D1D5DB',
    backgroundColor: '#F9FAFB',
  },
  legalFormButtonActive: {
    borderColor: '#2563EB',
    backgroundColor: '#EFF6FF',
  },
  legalFormButtonText: {
    fontSize: 12,
    color: '#6B7280',
    fontWeight: '500',
  },
  legalFormButtonTextActive: {
    color: '#2563EB',
    fontWeight: '600',
  },
  sidebarColorPicker: {
    marginBottom: 16,
  },
  colorGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginBottom: 8,
  },
  colorOption: {
    width: 36,
    height: 36,
    borderRadius: 6,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'transparent',
  },
  colorOptionSelected: {
    borderColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 4,
  },
  colorInput: {
    backgroundColor: '#F9FAFB',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 6,
    padding: 8,
    fontSize: 13,
    color: '#111827',
    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',
  },
  fullscreenPreview: {
    flex: 1,
    backgroundColor: '#F3F4F6',
  },
  previewToolbar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  toolbarButton: {
    backgroundColor: '#2563EB',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  toolbarButtonText: {
    color: '#fff',
    fontSize: 13,
    fontWeight: '600',
  },
  previewHint: {
    fontSize: 13,
    color: '#6B7280',
    fontStyle: 'italic',
  },
  previewScroll: {
    flex: 1,
  },
  previewScrollContent: {
    padding: 40,
    alignItems: 'center',
  },
  invoicePreview: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 48,
    borderWidth: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 12,
    elevation: 8,
    width: Math.min(screenWidth - 80, 800),
    minHeight: screenHeight - 200,
  },
  invoiceHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    padding: 20,
    borderRadius: 8,
    marginBottom: 32,
  },
  invoiceHeaderLeft: {
    flex: 1,
  },
  invoiceTitle: {
    fontSize: 32,
    fontWeight: '800',
    marginBottom: 12,
  },
  invoiceNumberLabel: {
    fontSize: 16,
    fontWeight: '600',
    marginRight: 4,
  },
  invoiceNumber: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 6,
  },
  invoiceDate: {
    fontSize: 13,
    marginBottom: 3,
  },
  logoPlaceholder: {
    width: 120,
    height: 120,
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#D1D5DB',
    borderStyle: 'dashed',
  },
  logoImage: {
    width: '100%',
    height: '100%',
    borderRadius: 6,
    resizeMode: 'contain',
  },
  logoText: {
    fontSize: 11,
    color: '#6B7280',
    fontWeight: '600',
    textAlign: 'center',
  },
  invoiceSection: {
    marginBottom: 32,
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  companyInfo: {
    flex: 1,
  },
  companyName: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 8,
  },
  companyDetails: {
    fontSize: 14,
    marginBottom: 3,
    lineHeight: 20,
  },
  clientInfo: {
    flex: 1,
    alignItems: 'flex-end',
  },
  clientLabel: {
    fontSize: 15,
    fontWeight: '700',
    marginBottom: 12,
  },
  clientName: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 6,
  },
  clientAddress: {
    fontSize: 14,
    textAlign: 'right',
    lineHeight: 20,
  },
  invoiceTable: {
    marginBottom: 32,
    borderRadius: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  tableHeader: {
    flexDirection: 'row',
    padding: 14,
  },
  tableHeaderText: {
    color: '#fff',
    fontWeight: '700',
    fontSize: 13,
  },
  tableRow: {
    flexDirection: 'row',
    padding: 14,
    backgroundColor: '#fff',
  },
  tableCell: {
    fontSize: 14,
  },
  tableColDescription: {
    flex: 3,
  },
  tableColQty: {
    flex: 1,
    textAlign: 'center',
  },
  tableColPrice: {
    flex: 1.5,
    textAlign: 'right',
  },
  tableColTotal: {
    flex: 1.5,
    textAlign: 'right',
  },
  totalsSection: {
    alignSelf: 'flex-end',
    minWidth: 300,
    marginBottom: 32,
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 10,
    paddingHorizontal: 16,
  },
  totalLabel: {
    fontSize: 15,
    fontWeight: '500',
  },
  totalValue: {
    fontSize: 15,
    fontWeight: '600',
  },
  grandTotalRow: {
    marginTop: 12,
    paddingVertical: 14,
    borderRadius: 8,
  },
  grandTotalLabel: {
    fontSize: 18,
    fontWeight: '800',
  },
  grandTotalValue: {
    fontSize: 20,
    fontWeight: '800',
  },
  sectionTitle: {
    fontSize: 15,
    fontWeight: '700',
    marginBottom: 10,
  },
  sectionText: {
    fontSize: 14,
    lineHeight: 20,
  },
  legalSection: {
    borderTopWidth: 1,
    paddingTop: 20,
    marginTop: 20,
  },
  legalTitle: {
    fontSize: 14,
    fontWeight: '700',
    marginBottom: 10,
  },
  legalText: {
    fontSize: 12,
    lineHeight: 18,
    marginBottom: 6,
  },
  invoiceFooter: {
    marginTop: 32,
    paddingTop: 20,
    alignItems: 'center',
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  footerText: {
    fontSize: 14,
    fontStyle: 'italic',
  },
  inlineEditable: {
    borderRadius: 4,
    padding: 4,
    margin: -4,
  },
  inlineEditableActive: {
    backgroundColor: '#FEF3C7',
  },
  inlineEditableInput: {
    fontWeight: '600',
  },
  highlightedElement: {
    backgroundColor: '#FEF3C7',
  },
  deleteModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  deleteModalContent: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 24,
    width: '100%',
    maxWidth: 400,
  },
  deleteModalTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#111827',
    marginBottom: 12,
  },
  deleteModalText: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 24,
    lineHeight: 20,
  },
  deleteModalActions: {
    flexDirection: 'row',
    gap: 12,
  },
  deleteModalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  deleteModalCancelButton: {
    backgroundColor: '#F3F4F6',
  },
  deleteModalCancelButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280',
  },
  deleteModalConfirmButton: {
    backgroundColor: '#DC2626',
  },
  deleteModalConfirmButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#fff',
  },
  companyProfileModalContent: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 24,
    margin: 20,
    maxWidth: 600,
    alignSelf: 'center',
    width: '100%',
  },
  uploadButton: {
    backgroundColor: '#F3F4F6',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  uploadButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280',
  },
});
