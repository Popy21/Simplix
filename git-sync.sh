#!/bin/bash

# Script de synchronisation Git automatique
# Fait un pull si possible, sinon push les modifications locales

echo "üîÑ Synchronisation Git en cours..."

# V√©rifier si on est dans un d√©p√¥t Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erreur: Pas dans un d√©p√¥t Git"
    exit 1
fi

# R√©cup√©rer les informations du remote
echo "üåê R√©cup√©ration des informations du remote..."
git fetch

# V√©rifier s'il y a des modifications locales
if [[ -n $(git status -s) ]]; then
    echo "üìù Modifications locales d√©tect√©es"
    HAS_LOCAL_CHANGES=true
else
    echo "‚úì Pas de modifications locales"
    HAS_LOCAL_CHANGES=false
fi

# V√©rifier si on est en avance/retard par rapport au remote
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u} 2>/dev/null)
BASE=$(git merge-base @ @{u} 2>/dev/null)

if [ -z "$REMOTE" ]; then
    echo "‚ö†Ô∏è  Pas de branche remote configur√©e"
    exit 1
fi

# Cas 1: D√©j√† √† jour
if [ "$LOCAL" = "$REMOTE" ]; then
    echo "‚úì D√©j√† √† jour avec le remote"

    if [ "$HAS_LOCAL_CHANGES" = true ]; then
        echo "üì§ Push des modifications locales..."
        git add .
        read -p "Message de commit: " commit_msg
        if [ -z "$commit_msg" ]; then
            commit_msg="Update $(date '+%Y-%m-%d %H:%M:%S')"
        fi
        git commit -m "$commit_msg"
        git push
        echo "‚úÖ Modifications push√©es avec succ√®s"
    fi

# Cas 2: En retard par rapport au remote (besoin de pull)
elif [ "$LOCAL" = "$BASE" ]; then
    # Si on a des modifications locales, il faut les commit d'abord
    if [ "$HAS_LOCAL_CHANGES" = true ]; then
        echo "üìù Commit des modifications locales avant pull..."
        git add .
        read -p "Message de commit: " commit_msg
        if [ -z "$commit_msg" ]; then
            commit_msg="WIP: Auto-commit before pull $(date '+%Y-%m-%d %H:%M:%S')"
        fi
        git commit -m "$commit_msg"
        echo "‚úÖ Modifications locales committ√©es"
    fi

    echo "üì• Pull des modifications distantes..."
    if git pull --no-edit; then
        echo "‚úÖ Pull effectu√© avec succ√®s"
    else
        echo "‚ùå Erreur lors du pull"
        echo "‚ö†Ô∏è  Il peut y avoir des conflits √† r√©soudre"
        echo ""
        echo "Commandes utiles:"
        echo "  git status              # Voir les conflits"
        echo "  git diff                # Voir les diff√©rences"
        echo "  git merge --abort       # Annuler le merge"
        exit 1
    fi

# Cas 3: En avance par rapport au remote (besoin de push)
elif [ "$REMOTE" = "$BASE" ]; then
    echo "üì§ Push des modifications locales..."

    if [ "$HAS_LOCAL_CHANGES" = true ]; then
        git add .
        read -p "Message de commit: " commit_msg
        if [ -z "$commit_msg" ]; then
            commit_msg="Update $(date '+%Y-%m-%d %H:%M:%S')"
        fi
        git commit -m "$commit_msg"
    fi

    git push
    echo "‚úÖ Modifications push√©es avec succ√®s"

# Cas 4: Divergence (local et remote ont des commits diff√©rents)
else
    echo "‚ö†Ô∏è  Divergence d√©tect√©e entre local et remote"
    echo ""
    echo "Votre branche locale et la branche distante ont diverg√©."
    echo ""

    # Afficher les derniers commits locaux et distants
    echo "üìä Commits locaux (absents du remote):"
    git log --oneline @{u}..@ | head -3
    echo ""
    echo "üìä Commits distants (absents en local):"
    git log --oneline @..@{u} | head -3
    echo ""

    if [ "$HAS_LOCAL_CHANGES" = true ]; then
        echo "üìù Commit des modifications locales..."
        git add .
        read -p "Message de commit: " commit_msg
        if [ -z "$commit_msg" ]; then
            commit_msg="WIP: Auto-commit $(date '+%Y-%m-%d %H:%M:%S')"
        fi
        git commit -m "$commit_msg"
    fi

    echo "Options:"
    echo "  1) Pull puis push (merge - recommand√©)"
    echo "  2) Rebase puis push (historique lin√©aire)"
    echo "  3) Annuler"
    echo ""
    read -p "Votre choix (1-3): " choice

    case $choice in
        1)
            echo "üì• Pull avec merge..."
            if git pull --no-edit; then
                echo "‚úÖ Pull effectu√© avec succ√®s"
                echo "üì§ Push des modifications..."
                git push
                echo "‚úÖ Push effectu√© avec succ√®s"
            else
                echo "‚ùå Erreur lors du pull"
                echo "R√©solvez les conflits puis relancez le script"
                exit 1
            fi
            ;;
        2)
            echo "üì• Pull avec rebase..."
            if git pull --rebase; then
                echo "‚úÖ Rebase effectu√© avec succ√®s"
                echo "üì§ Push des modifications..."
                git push
                echo "‚úÖ Push effectu√© avec succ√®s"
            else
                echo "‚ùå Erreur lors du rebase"
                echo "R√©solvez les conflits avec: git rebase --continue"
                echo "Ou annulez avec: git rebase --abort"
                exit 1
            fi
            ;;
        3|*)
            echo "‚ùå Synchronisation annul√©e"
            echo ""
            echo "Pour synchroniser manuellement:"
            echo "  git pull          # R√©cup√©rer les changements distants"
            echo "  git push          # Envoyer les changements locaux"
            exit 1
            ;;
    esac
fi

echo "üéâ Synchronisation termin√©e"
